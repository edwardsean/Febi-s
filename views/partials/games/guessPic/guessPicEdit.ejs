<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<style>

html, body {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    overflow: hidden; /* Prevent scrolling */
}

.container {
    display: grid;
    text-align: center;
    grid-template-rows: auto 3fr auto 2fr auto; /* Define rows */
    height: 100vh; /* Full viewport height */
    width: 100vw; /* Full viewport width */
    gap: 20px; /* Add spacing between elements */
}

.wrapper {
    position: relative;
    width: 800px;
    height: 400px;
    margin: 0 auto;
    display: flex;
    align-items: center; /* Align items vertically */
    justify-content: center;
}

.nav-btn {
    background-color: rgba(0, 0, 0, 0.6); /* Semi-transparent background */
    color: white;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    font-size: 1.5em;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 2; /* Ensure buttons are above everything else */
    transition: background-color 0.3s ease;
}

.nav-btn.left {
    margin-right: 10px; /* Space between left button and picture */
}

.nav-btn.right {
    margin-left: 10px; /* Space between right button and picture */
}

.nav-btn:hover {
    background-color: rgba(0, 0, 0, 0.8); /* Darker on hover */
}

#game-container {
    width: 800px;
    height: 400px;
    border: 1px solid #000;
    overflow: hidden;
    position: relative;
}

#image-preview {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%; /* Fit the width of the container */
    height: 100%; /* Fit the height of the container */
    object-fit: cover; /* Ensure the image scales proportionally */
}

h1 {
    margin: 0;
}

#choices {
    display: grid;
    grid-template-columns: repeat(2, 1fr); /* Create 2 columns */
    grid-template-rows: repeat(2, 1fr); /* Create 2 rows */
    gap: 10px;
    justify-content: center; /* Center the choices horizontally */
    align-items: center; /* Center the choices vertically */
    margin: 0 auto; /* Center the grid */
    width: 80%;
}

.choice {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 10px;
    background-color: #f0f0f0;
    border: 1px solid #ccc;
    cursor: pointer;
    font-size: 1em;
    height: 50px; /* Fixed height for each choice */
    box-sizing: border-box; /* Include padding and border in width/height */
    border-radius: 5px; /* Optional: Add rounded corners */
}

.upload-div {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    margin-bottom: 20px;
}

#upload-input {
    margin-top: 5px;
    padding: 5px;
}

button[type="submit"] {
    border-radius: 5px; /* Slightly rounded corners */
    margin: 10px auto; /* Center the button with a margin */
    padding: 10px 20px; /* Increased padding for a better click area */
    cursor: pointer;
    
    color: white;
    font-size: 1em;
    border: none;
    transition: background-color 0.3s ease;
}

#save-button:hover {
    background-color: #218838; /* Darker green on hover */
}

#save-button{
    background-color: #28a745;
}

#delete-button {
    background-color: #dc3545;
}

#delete-button:hover {
    background-color: darkred;
}



.choice-container {
    display: flex;
    align-items: center;
    gap: 10px; /* Spacing between input and buttons */
    margin-bottom: 15px;
    justify-content: center;
}

button {
    padding: 5px 10px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: opacity 0.3s ease, background-color 0.3s ease;
}

.correct-btn {
    background-color: #28a745;
    color: white;
}

.wrong-btn {
    background-color: #dc3545;
    color: white;
}

/* Add transparency to buttons by default */
.transparent {
    opacity: 0.5;
}

/* Fully opaque when active */
.active {
    opacity: 1;
}

#choices input {
    width: 50%;
}

@keyframes shake {
    0% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    50% { transform: translateX(5px); }
    75% { transform: translateX(-5px); }
    100% { transform: translateX(0); }
}

.shake {
    animation: shake 0.5s ease;
}
   
</style>
<body>
    
    <div class="container">
        <form class="add-media-form" id="addMediaForm" action = "/game/Save?gameName=GUESS%20THE%20PIC" method = "POST" enctype="multipart/form-data">
           

            <h1 class = "hidden">Guess the Picture</h1>

            <div class = "wrapper">
                <button type = "button" class="nav-btn left">&lt;</button>
                <div id="game-container">
                    <img id="image-preview" src="">
                </div>
                <button type = "button" class="nav-btn right">&gt;</button>
                 
            </div>
            <div class = "upload-div">
                <h2>Upload Image: </h2>
                <input type="file" name = "picture" id = "upload-input" accept = "image/*" <% if (locals.newEntry) { %>required<% } %>>
            </div>
            
            
    
            <div id="choices" class="hidden">
                <div class="choice-container">
                    <input type="text" name="option_1" class="choice" id="option_1" placeholder="Enter Answer 1" required>
                    <input type="hidden" value = "" id = "option_1_status" name = "status">
                    <button type="button" class="correct-btn transparent" onclick="markButton(this, 'option_1', true)">Correct</button>
                    <button type="button" class="wrong-btn transparent" onclick="markButton(this, 'option_1', false)">Wrong</button>
                </div>
                <div class="choice-container">
                    <input type="text" name="option_2" class="choice" id="option_2" placeholder="Enter Answer 2" required>
                    <input type="hidden" value = "" id = "option_2_status" name = "status">
                    <button type="button" class="correct-btn transparent" onclick="markButton(this, 'option_2', true)">Correct</button>
                    <button type="button" class="wrong-btn transparent" onclick="markButton(this, 'option_2', false)">Wrong</button>
                </div>
                <div class="choice-container">
                    <input type="text" name="option_3" class="choice" id="option_3" placeholder="Enter Answer 3" required>
                    <input type="hidden" value = "" id = "option_3_status" name = "status">
                    <button type="button" class="correct-btn transparent" onclick="markButton(this, 'option_3', true)">Correct</button>
                    <button type="button" class="wrong-btn transparent" onclick="markButton(this, 'option_3', false)">Wrong</button>
                </div>
                <div class="choice-container">
                    <input type="text" name="option_4" class="choice" id="option_4" placeholder="Enter Answer 4" required>
                    <input type="hidden" value = "" id = "option_4_status" name = "status">
                    <button type="button" class="correct-btn transparent" onclick="markButton(this, 'option_4', true)">Correct</button>
                    <button type="button" class="wrong-btn transparent" onclick="markButton(this, 'option_4', false)">Wrong</button>
                </div>
            </div>
            <input type="hidden" name = "id" id = "current_id" value = "<%= assigned_id%>">
            
           
            <input type="hidden" name="currentImage" id="currentImage" value="">
            <button type="submit" id = "save-button">Save</button>
            <button type="submit" id = "delete-button" style = "display: none;">Delete</button>
        </form>

      

    </div>

    


<script>
    //upload picture
    const uploadInput = document.getElementById('upload-input');
    const imagePreview = document.getElementById('image-preview');
    const saveButton = document.getElementById("save-button");
    const deleteButton = document.getElementById("delete-button");
    const Form = document.getElementById("addMediaForm");


        uploadInput.addEventListener('change', function () {
            const file = this.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    imagePreview.src = e.target.result; 
                    imagePreview.style.display = 'block'; 
                };
                reader.readAsDataURL(file); 
            }
        });
    
    //fetch content
    const rightButton = document.querySelector(".right"),
    leftButton = document.querySelector(".left");
    const gameContainer = document.getElementById("game-container");
    const choices = document.getElementById("choices");
    const uploadDiv = document.querySelector(".upload-div");
    const currentId = document.getElementById("current_id");
    let maxId = <%= contents.length %>;
 
    
    async function fetchContent(id) {
        try {
            console.log("ID in server: ", id);
            const response = await fetch(`/game/EditInside/GUESS%20THE%20PIC/${id}`);
            const data = await response.json();
            console.log("data:", data);
            if (data.newEntry) {
                //New content mode
                console.log("New content");
                deleteButton.style.display = "none";
               
                ["option_1", "option_2", "option_3", "option_4"].forEach(optionId => {
                    document.getElementById(optionId).value = "";
                    document.getElementById(`${optionId}_status`).value = "";
                    const buttons = document.querySelectorAll(`#${optionId} ~ button`);
                    buttons.forEach(button => {
                        button.classList.add("transparent");
                        button.classList.remove("active");
                    });
                    document.getElementById(optionId).style.borderColor = "";
                });

                document.getElementById("image-preview").src = "";
                
                
                
            } else {
                // Display existing content
                gameContainer.style.display = "block";
                choices.style.display = "grid";
                // uploadDiv.style.display = "none";
                uploadInput.removeAttribute("required");
                deleteButton.style.display = "block";

                document.getElementById("image-preview").src = `/${data.content.image_path}`;
                document.getElementById("currentImage").value = `${data.content.image_path}`;
                document.getElementById("option_1").value = data.content.option_1;
                document.getElementById("option_2").value = data.content.option_2;
                document.getElementById("option_3").value = data.content.option_3;
                document.getElementById("option_4").value = data.content.option_4;


                ["option_1", "option_2", "option_3", "option_4"].forEach(optionId => {
                    const status = document.getElementById(`${optionId}_status`); //correct or wrong
                    const buttons = document.querySelectorAll(`#${optionId} ~ button`); //green red
                    const value = document.getElementById(optionId);
                    status.value = "";
                    //reset all
                    buttons[0].classList.add("transparent");
                    buttons[0].classList.remove("active");
                    buttons[1].classList.add("transparent");
                    buttons[1].classList.remove("active");
                    document.getElementById(optionId).style.borderColor = "";

                    console.log("current: ", value.value, "correct answer: ", data.content.correct_answer);
                    if (data.content.correct_answer === value.value) {
                        console.log(optionId, " is correct");
                        status.value = "correct";
                        buttons[0].classList.remove("transparent");
                        buttons[0].classList.add("active");
                        buttons[1].classList.add("transparent");
                        document.getElementById(optionId).style.borderColor = "green";
                    } else {
                        console.log(optionId, " is wrong");
                        status.value = "wrong";
                        buttons[1].classList.remove("transparent");
                        buttons[1].classList.add("active");
                        buttons[0].classList.add("transparent");
                        document.getElementById(optionId).style.borderColor = "red";
                    }
                });

               
                
            }
        } catch (error) {
            console.error("Error fetching content:", error);
        }
    }
    //button functions
    rightButton.addEventListener("click", () => {
        const nextId = parseInt(currentId.value, 10) + 1;
        console.log("nextId:", nextId);
        console.log("maxId: ", maxId);
        if (nextId > maxId) {
            currentId.value = maxId + 1;
        } else {
            currentId.value = nextId;
        }
        fetchContent(currentId.value);
    });

    leftButton.addEventListener("click", () => {
        const prevId = parseInt(currentId.value, 10) - 1;
        if (prevId > 0) {
            currentId.value = prevId;
            fetchContent(currentId.value);
        }
    });
    console.log(currentId.value);
    fetchContent(currentId.value);


    //button correct and wrong
    function markButton(clickedButton, inputId, isCorrect) {
        // Get the container for the option buttons
        const container = clickedButton.parentNode;
        // Select all buttons in this container (should be two: Correct and Wrong)
        const buttons = container.querySelectorAll("button");
        // Get the hidden status input for this option
        const status = document.getElementById(`${inputId}_status`);

        // Reset both buttons: remove "active" and add "transparent"
        buttons.forEach(button => {
            button.classList.remove("active");
            button.classList.add("transparent");
        });

        // Mark the clicked button as active: remove transparent and add active
        clickedButton.classList.remove("transparent");
        clickedButton.classList.add("active");

        // Update the corresponding status value
        if (isCorrect) {
            status.value = "correct";
            // Optionally update the input border if desired
            document.getElementById(inputId).style.borderColor = "green";
        } else {
            status.value = "wrong";
            document.getElementById(inputId).style.borderColor = "red";
        }

        console.log(`${inputId} marked as ${isCorrect ? "correct" : "wrong"}`);
    }
    
    function checkStatus() {
        const statuses = document.querySelectorAll('[id$="_status"]'); 
        let correctCount = 0;
        let wrongCount = 0;

        statuses.forEach(status => {
            if (status.value === "correct") {
                correctCount++;
            } else if (status.value === "wrong") {
                wrongCount++;
            }
        });

        return { correct: correctCount, wrong: wrongCount };
    }


    //save button
    saveButton.addEventListener("click", async (e) => {
        e.preventDefault(); 
        const formData = new FormData(Form);
        console.log("formData: ", formData);
        const status = checkStatus();
        if (status.correct === 1 && status.wrong === 3) {
            try {
                const response = await fetch(Form.action, {
                    method: "POST",
                    body: formData,
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log("UPDATED SUCCESSFULLY:", result);

                    currentId.value = result.newId;
                    maxId = result.newMaxId;
                    deleteButton.style.display = "block";


                } else {
                    console.error("Save failed:", await response.text());
                }
            } catch (err) {
                console.error("Error saving:", err);
            }
        } else {
            alert("Exactly one correct answer and three wrong answers are required.");
        }
});
    

    deleteButton.addEventListener('click', async (e) => {
        e.preventDefault(); 
        const confirmDelete = confirm('Are you sure you want to delete this content?');
        if(!confirmDelete) return;

        const deleteData = {id : currentId.value};

        try {
                const response = await fetch('/game/Delete?gameName=GUESS%20THE%20PIC', {
                    method: "POST",
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(deleteData),
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log("DELETED SUCCESSFULLY:", result);

                    currentId.value = result.newId;
                    maxId = result.newMaxId;

                    window.location.href = "/game/Edit/GUESS%20THE%20PIC";

                } else {
                    console.error("Save failed:", await response.text());
                }
        } catch (err) {
                console.error("Error saving:", err);
        }
    });

    
       
    
</script>
</body>
</html>