<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Travel Tracker</title>
  <link rel="stylesheet" href="../style/Itinerary.css">
  <link rel="stylesheet" href="../style/swipeGallery.css">
  <style>
    /* Basic styles for the gallery */
    /* .gallery-container {
      width: 90%;
      margin: 20px auto;
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 20px;
    } */
    .gallery-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 20px;
    justify-items: stretch; /* Ensures child items stretch to fill the grid cells */
    }

    .gallery-item {
      border: 2px solid #ccc;
      border-radius: 10px;
      overflow: hidden;
      position: relative;
      padding : 0;
      margin : 0;
      width : 100%;
      height : auto;
    }

    .gallery-item img,
    .gallery-item video {
      width: 100%;
      display: block;
      height: 100%;
      object-fit: cover;
      max-height : 200px;
    }

    .gallery-item .delete-btn {
      position: absolute;
      top: 10px;
      right: 10px;
      background: red;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      padding: 5px;
      width : auto;
      max-width: 80px;
    }

    .add-media-form {
      display: flex;
      justify-content: center;
      gap: 10px;
      margin: 20px;
      height : auto;
    }

    .add-media-form input,
    .add-media-form button {
      padding: 10px;
      font-size: 16px;
      border: 1px solid #ccc;
      border-radius: 5px;
      margin : 0;
      
    }

    .add-media-form button {
      background-color: pink;
      color: white;
      cursor: pointer;
    }

    img, video {
    border: none; /* Remove any default borders */
    display: block; /* Eliminate inline element spacing */
    }

    .controls {
        margin-bottom : 30px;
    }


    .media-checkbox {
  position: absolute;
  top: 10px;
  left: 10px;
  width: 20px;
  height: 20px;
  background-color: #ccc;
  border: 2px solid #ccc;
  border-radius: 5px;
  cursor: pointer;
  transition: all 0.3s ease-in-out;
  appearance: none; /* Remove the default checkbox styling */
}

    .media-checkbox:checked {
    background-color: blue; /* Change to blue when checked */
    border-color: blue;
    }

    .hidden {
    display: none; /* Hide checkbox initially */
    }


    .controls {
        display: flex;
        justify-content: center;
        gap: 15px;
        margin: 15px 0;
    }

    .controls button {
        padding: 10px 15px;
        font-size: 16px;
        background-color: lightgray;
        color: black;
        border: 1px solid #ccc;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .controls button:hover {
        background-color: pink;
        color: white;
    }
         
    @keyframes shake {
    0% {
        transform: translateX(0);
    }
    25% {
        transform: translateX(-5px);
    }
    50% {
        transform: translateX(5px);
    }
    75% {
        transform: translateX(-5px);
    }
    100% {
        transform: translateX(0);
    }
    }

    .shake {
        animation: shake 0.5s ease-in-out; /* Duration of the animation */
    }
  </style>
</head>

<body>
    <div class="content-container">
        <div class="header">
            <!-- Buttons Section -->
            <div id="buttons">
              <a href="<%= referrer %>" class="back button">
                <i class="fa-solid fa-arrow-left"></i>
              </a>
              <a href="/" class="home button">
                <i class="fa-solid fa-house"></i>
              </a>
              <a href="/menu" class="menu button">
                <i class="fa-solid fa-book"></i>
              </a>
            </div>
          
            <!-- Forms Section -->
            <div class="forms-container">
              <form action="/Itinerary/list" class="tab-view tab-view-height-auto" method="post">
                <input type="submit" name="list" value="Check List" id="list">
                <label for="list" style="background-color: pink">List</label>
          
                <input type="submit" name="add" value="new" id="tab">
                <label for="tab">Add List</label>
          
                <input type="submit" name="memories" id="memories">
                <label for="memories">See Gallery</label>
              </form>
            </div>
        </div>
    
        <div class="gallery">
            <h1 style="text-align: center;">Memories in <%= country_name%></h1>
            <!-- Form to Add Media -->
            <form class="add-media-form" id="addMediaForm" action = "/uploadMedia" method = "POST" enctype="multipart/form-data">
              <input type="hidden" name="country_name" value="<%= country_name %>">
              <input type="file" name = "media" id="mediaInput" accept="image/*,video/*" required>
              <button type="submit">Add to Gallery</button>
            </form>
    
            <!-- Controls -->
            <div class="controls">
                <button id="select">Select</button>
                <button id="selectAll">Select All</button>
                <button id="deleteSelected" style="background-color: red; color: white;">Trash Selected</button>
            </div>
        
            <div class="gallery-container">
                <% media.forEach(item => { %>
                    <div class="gallery-item">
                        <input type="checkbox" class="media-checkbox hidden" data-id="<%= item.id %>" data-type="<%= item.media_type %>">
                        <% if (item.media_type === 'image') { %>
                            <img src="/<%= item.file_path %>" alt="Gallery Image">
                        <% } else if (item.media_type === 'video') { %>
                            <video src="/<%= item.file_path %>" controls></video>
                        <% } %>
                        <button class="delete-btn hidden" data-id="<%= item.id %>">Delete</button>
                    </div>
                <% }); %>
            </div>
        </div>
    </div>
    

    <div id="imageModal" class="modal hidden">
        <div class="modal-content">
          <span class="close">&times;</span>
          <img id="modalImage" src="" alt="Expanded Image">
          <button class="nav-btn left">&lt;</button>
          <button class="nav-btn right">&gt;</button>
        </div>
    </div>
      


    
    
        
<script>
    const toggleCheckboxes = () => {
      const checkboxes = document.querySelectorAll(".media-checkbox");
      checkboxes.forEach((checkbox) => checkbox.classList.toggle("hidden"));
    };

    const toggleDeleteButton = () => {
        const deleteButtons = document.querySelectorAll(".delete-btn");
        deleteButtons.forEach((deleteb) => deleteb.classList.toggle("hidden"));
    }

    const makeUncheck = () => {
        const checkboxes = document.querySelectorAll(".media-checkbox");
        checkboxes.forEach((checkbox) => checkbox.checked = false);
    };

    //select
   document.getElementById("select").addEventListener("click", () => {
        toggleCheckboxes();
        makeUncheck();
        toggleDeleteButton();
   }); 

   //selectall
   document.getElementById("selectAll").addEventListener("click", () => {
    toggleCheckboxes();
        document.querySelectorAll(".media-checkbox").forEach((checkbox) => {
            checkbox.checked = true;
        });
   });

   //delete all
   document.getElementById("deleteSelected").addEventListener("click", async () => {
        const selectedItems = Array.from(document.querySelectorAll(".media-checkbox:checked"));
        if (selectedItems.length === 0) {
            alert("No items selected!");
            return;
        }
        const confirmDelete = confirm(`Are you sure you want to delete ${selectedItems.length} selected items?`)
        if(!confirmDelete) return;

        const ids = selectedItems.map((item) => item.dataset.id);
        console.log("From client", ids);
        try {   
            const response = await fetch("/uploadMedia/deleteMedia", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ ids }),
            });

            if (!response.ok) {
                const error = await response.text();
                console.error("Error response from server:", error);
                alert("Error deleting selected items.");
                return;
            }


            selectedItems.forEach((items) => {
                items.closest(".gallery-item").remove();
            });

        } catch(err) {
            alert("Error: bangkess", err.message);
        }

   });

   //delete
   document.querySelectorAll(".delete-btn").forEach((deleteb) => {
    deleteb.addEventListener("click", async () => {
        const galleryItem = deleteb.closest(".gallery-item");
        const checkbox = galleryItem.querySelector(".media-checkbox");

        if (!checkbox.checked) {
            galleryItem.classList.add("shake");

            // Remove the shake class after the animation completes
            setTimeout(() => {
                galleryItem.classList.remove("shake");
            }, 500); // Duration should match the animation duration in CSS
            return;
        }

        const id = deleteb.dataset.id;
        const confirmDelete = confirm("Are you sure you want to delete this item?");
        if (!confirmDelete) return;

        try {
            const response = await fetch("/uploadMedia/deleteMedia", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ ids: [id] }),
            });

            if (!response.ok) {
                const error = await response.text();
                console.error("Error response from server:", error);
                alert("Error deleting item.");
                return;
            }

            galleryItem.remove();
        } catch (err) {
            console.error("Error deleting item:", err);
            alert("Error deleting item.");
        }
    });
});

    //modal
const modal = document.getElementById("imageModal");
const modalImage = document.getElementById("modalImage");
const closeModal = document.querySelector(".close");
const leftNav = document.querySelector(".nav-btn.left");
const rightNav = document.querySelector(".nav-btn.right");
const galleryItems = document.querySelectorAll(".gallery-item img");
let currentIndex = 0;

//Open Modal
function openModal(index) {
  currentIndex = index;
  modalImage.src = galleryItems[currentIndex].src;
  modal.classList.remove("hidden");
  modal.classList.add("visible");
  document.body.classList.add("modal-open");
}

//Close Modal
function closeModalHandler() {
  modal.classList.remove("visible");
  modal.classList.add("hidden");
  document.body.classList.remove("modal-open");
}

//Navigate Left
function navigateLeft() {
  currentIndex = (currentIndex - 1 + galleryItems.length) % galleryItems.length;
  modalImage.src = galleryItems[currentIndex].src;
}

//Navigate Right
function navigateRight() {
  currentIndex = (currentIndex + 1) % galleryItems.length;
  modalImage.src = galleryItems[currentIndex].src;
}

//Event Listeners
galleryItems.forEach((img, index) => {
  img.addEventListener("click", () => openModal(index));
});

closeModal.addEventListener("click", closeModalHandler);
modal.addEventListener("click", (e) => {
  if (e.target === modal) closeModalHandler();
});
leftNav.addEventListener("click", navigateLeft);
rightNav.addEventListener("click", navigateRight);

//Keyboard Navigation
document.addEventListener("keydown", (e) => {
  if (!modal.classList.contains("visible")) return;

  if (e.key === "ArrowLeft") {
    navigateLeft();
  } else if (e.key === "ArrowRight") {
    navigateRight();
  } else if (e.key === "Escape") {
    closeModalHandler();
  }
});






</script>
</body>

</html>